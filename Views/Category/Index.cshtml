@model StockControll.ViewModel.CategoryViewModel
@using StockControll.Commons
@using Newtonsoft.Json;
@using PagedList.Mvc

@{
    var listOfSizes = new int[] { 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 };

    ViewBag.Title = "Modelos de calçados";
}

<style>
    .product_warning {
        color: orangered;
        font-size: 10px;
        letter-spacing: 1px;
    }

    .usability-button {
        cursor: pointer;
    }

    .space-between {
        display: flex;
        justify-content: space-between;
    }

    .margin-top-10 {
        margin-top: 10px;
    }
</style>

<h3 class="page-title weight-600">@ViewBag.Title</h3>
<hr class="weight-600" />

<div id="filters" class="filters">
    <div class="filters-container">
        @using (Html.BeginForm("Index", "Category", FormMethod.Get, new { @class = "row g-3", role = "form" }))
        {
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.SearchCategoryName, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchCategoryName, new { @class = "form-control", @id = "user-name-search" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.SearchColor, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchColor, new { @class = "form-control", @id = "user-name-search" })
            </div>

            <div class="col-md-6 margin-top-10">
                @Html.LabelFor(m => m.Filters.SearchSole, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchSole, new { @class = "form-control", @id = "user-name-search" })
            </div>
            <div class="col-md-6 margin-top-10">
                @Html.LabelFor(m => m.Filters.Rows, new { @class = "form-label", @for = "user-name-search" })
                @Html.DropDownListFor(m => m.Filters.Rows, Model.Filters.GetPaginationOptions(), "Escolha uma opção de paginação", new { @class = "form-control" })
            </div>

            <div class="col-lg-12" style="text-align: right; margin-top: 10px;">
                <button type="submit" class="btn btn-primary">
                    <i class="fa-solid fa-check"></i>
                    Filtrar
                </button>
            </div>
        }
    </div>
    <div class="row button-set">
        <button id="btnShowFilters"
                onclick="$('.filters-container').slideToggle();"
                class="btn btn-primary">
            Filtros
        </button>
        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                onclick="downloadExcelFile()"
                class="btn btn-primary">
            Gerar relatório
        </button>

        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                data-toggle="modal"
                data-target="#create-category-modal"
                class="btn btn-primary">
            <i class="fa-solid fa-plus"></i>
            Novo modelo
        </button>

    </div>
</div>

<div class="panel-group" id="accordion">
    @if (Model.Categories.TotalItemCount > 0)
    {
        foreach (var category in Model.Categories)
        {
            var shoesIncluded = category.Shoes.Count();

            <div class="panel panel-default">
                <div class="panel-heading">
                    <a style="text-decoration: initial;" data-toggle="collapse" data-parent="#accordion" href="#collapse-@category.Id">
                        <h4 class="panel-title space-between">
                            @category.Name

                            <span>
                                @if (shoesIncluded < 10)
                                {
                                    <i class="fa-solid fa-triangle-exclamation product_warning"
                                       title="O produto possui menos de 10 unidades em estoque.">
                                       Em falta
                                    </i>
                                }
                                <span class="badge">@shoesIncluded</span>
                            </span>
                        </h4>
                    </a>
                </div>
                <div id="collapse-@category.Id" class="panel-collapse collapse">
                    <div class="panel-body">
                        <div class="text-right">
                            <button class="btn btn-primary"
                                    data-toggle="modal"
                                    data-target="@($"#edit-category-modal-{category.Id}")">
                                <i class="fa fa-pen-to-square"></i>
                            </button>

                            <button class="btn btn-primary"
                                    data-toggle="modal"
                                    data-target="@($"#create-shoe-modal-{category.Id}")">
                                Novo produto
                            </button>
                        </div>
                        <br />

                        @if (shoesIncluded > 0)
                        {
                            <div class="text-center">
                                @foreach (var size in listOfSizes)
                                {
                                    <span class="badge">
                                        @size <br /><br />
                                        @(category.ShoesBySize.ContainsKey(size) ? @category.ShoesBySize[size] : 0)
                                    </span>
                                }
                            </div>
                            <br />

                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th scope="col">Código de barra</th>
                                            <th scope="col">Preço (R$)</th>
                                            <th scope="col">Tamanho</th>
                                            <th scope="col">Referência</th>
                                            <th scope="col">Data de criação</th>
                                            <th scope="col"></th>
                                        </tr>
                                    </thead>
                                    <tbody class="table-group-divider">
                                        @foreach (var shoe in category.Shoes)
                                        {
                                            <tr>
                                                <th scope="row">@shoe.BarCodeHash</th>
                                                <td>@shoe.Price</td>
                                                <td>@shoe.Size</td>
                                                <td>@shoe.SizeId</td>
                                                <td>@shoe.CreatedAt</td>
                                                <td>
                                                    <i class="usability-button fa-solid fa-pen-to-square"
                                                       aria-hidden="true"
                                                       style="color: blue;"
                                                       data-toggle="modal"
                                                       data-target="@($"#edit-shoe-modal-{shoe.BarCodeHash}")"
                                                       title="Editar o calçado">
                                                    </i>
                                                    <i class="usability-button fa-solid fa-paper-plane"
                                                       style="color: green;"
                                                       onclick="submitSelling('@shoe.BarCodeHash')"
                                                       title="registrar venda de produto">
                                                    </i>

                                                    @* Modal para editar calçado *@
                                                    <div class="modal fade" id="@($"edit-shoe-modal-{shoe.BarCodeHash}")">
                                                        <div class="modal-dialog">
                                                            <div class="modal-content">
                                                                @using (Html.BeginForm("EditShoe", "Category", FormMethod.Post, new { @onsubmit = "submitForm(this, 0)", @id = $"edit-category-form-{category.Id}", role = "form" }))
                                                                {
                                                                    <div class="modal-header">
                                                                        <h3 class="modal-title">Editar calçado</h3>
                                                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                                                    </div>

                                                                    <div class="modal-body">
                                                                        @Html.AntiForgeryToken()

                                                                        @Html.Hidden("shoe.SizeId", "BRL")

                                                                        @Html.Hidden("olderHashCode", shoe.BarCodeHash)

                                                                        @Html.Hidden("shoe.BarCodeHash", shoe.BarCodeHash)

                                                                        <div class="form-group">
                                                                            @Html.LabelFor(_ => shoe.BarCodeHash, new { @class = "form-label", @for = $"shoe-barcode-{category.Id}" })
                                                                            @Html.TextBoxFor(_ => shoe.BarCodeHash, new { @class = "form-control", @id = $"shoe-barcode-{category.Id}", @disabled = true })
                                                                            @Html.ValidationMessageFor(_ => shoe.BarCodeHash)
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.LabelFor(_ => shoe.Price, new { @class = "form-label", @for = $"shoe-price-{category.Id}" })
                                                                            @Html.TextBoxFor(_ => shoe.Price, new { @class = "form-control", @id = $"shoe-price-{category.Id}" })
                                                                            @Html.ValidationMessageFor(_ => shoe.Price)
                                                                        </div>
                                                                        <div class="form-group">
                                                                            @Html.LabelFor(_ => shoe.Size, new { @class = "form-label", @for = $"shoe-size-{category.Id}" })
                                                                            @Html.TextBoxFor(_ => shoe.Size, new { @class = "form-control", @id = $"shoe-size-{category.Id}" })
                                                                            @Html.ValidationMessageFor(_ => shoe.Size)
                                                                        </div>
                                                                    </div>

                                                                    <div class="modal-footer">
                                                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                                                                        <button type="submit" class="btn btn-primary">Salvar</button>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-warning text-center">
                                <strong>Aviso:</strong> Não existem produtos vinculados a este modelo.
                            </div>
                        }
                    </div>

                    @* Modal para criar modelo produto *@
                    <div class="modal fade" id="@($"create-shoe-modal-{category.Id}")">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                @using (Html.BeginForm("CreateShoe", "Category", FormMethod.Post, new { @onsubmit = "submitForm(this, 0)", @id = $"create-category-form-{category.Id}", role = "form" }))
                                {
                                    <div class="modal-header">
                                        <h3 class="modal-title">Criar modelo de produto</h3>
                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    </div>

                                    <div class="modal-body">
                                        @Html.AntiForgeryToken()

                                        @Html.Hidden("newShoe.SizeId", "BRL")

                                        @Html.Hidden("newShoe.CreatedAt", DateTime.Now)

                                        @Html.Hidden("newShoe.Category.Id", category.Id)

                                        <div class="form-group">
                                            @Html.LabelFor(m => m.newShoe.BarCodeHash, new { @class = "form-label", @for = $"shoe-barcode-{category.Id}" })
                                            @Html.TextBoxFor(m => m.newShoe.BarCodeHash, new { @class = "form-control", @id = $"shoe-barcode-{category.Id}" })
                                            @Html.ValidationMessageFor(m => m.newShoe.BarCodeHash)
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.newShoe.Price, new { @class = "form-label", @for = $"shoe-price-{category.Id}" })
                                            @Html.TextBoxFor(m => m.newShoe.Price, new { @class = "form-control", @id = $"shoe-price-{category.Id}" })
                                            @Html.ValidationMessageFor(m => m.newShoe.Price)
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(m => m.newShoe.Size, new { @class = "form-label", @for = $"shoe-size-{category.Id}" })
                                            @Html.TextBoxFor(m => m.newShoe.Size, new { @class = "form-control", @id = $"shoe-size-{category.Id}" })
                                            @Html.ValidationMessageFor(m => m.newShoe.Size)
                                        </div>
                                    </div>

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                                        <button type="submit" class="btn btn-primary">Salvar</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    @* Modal para editar modelo produto *@
                    <div class="modal fade" id="@($"edit-category-modal-{category.Id}")">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                @using (Html.BeginForm("EditCategory", "Category", FormMethod.Post, new { @id = $"create-category-form-{category.Id}", role = "form" }))
                                {
                                    <div class="modal-header">
                                        <h3 class="modal-title">Editar modelo de produto</h3>
                                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                                    </div>

                                    <div class="modal-body">
                                        @Html.AntiForgeryToken()

                                        @Html.Hidden("category.Id", category.Id)

                                        <div class="form-group">
                                            @Html.LabelFor(_ => category.Name, new { @class = "form-label", @for = $"category-name-{category.Id}" })
                                            @Html.TextBoxFor(_ => category.Name, new { @class = "form-control", @id = $"category-name-{category.Id}" })
                                            @Html.ValidationMessageFor(_ => category.Name)
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(_ => category.Color, new { @class = "form-label", @for = $"category-color-{category.Id}" })
                                            @Html.TextBoxFor(_ => category.Color, new { @class = "form-control", @id = $"category-color-{category.Id}" })
                                            @Html.ValidationMessageFor(_ => category.Color)
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(_ => category.Sole, new { @class = "form-label", @for = $"category-sole-{category.Id}" })
                                            @Html.TextBoxFor(_ => category.Sole, new { @class = "form-control", @id = $"category-sole-{category.Id}" })
                                            @Html.ValidationMessageFor(_ => category.Sole)
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(_ => category.Description, new { @class = "form-label", @for = $"category-description-{category.Id}" })
                                            @Html.TextBoxFor(_ => category.Description, new { @class = "form-control", @id = $"category-description-{category.Id}" })
                                            @Html.ValidationMessageFor(_ => category.Description)
                                        </div>
                                    </div>

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                                        <button type="submit" class="btn btn-primary">Salvar</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="alert alert-warning text-center">
            <strong>Aviso:</strong> Não foram encontrados registros disponíveis.
        </div>
    }
</div>


@if (@Model.Categories.TotalItemCount > 0)
{
    <p>Exibindo de @Model.Filters.Page até @Model.Categories.PageCount de @Model.Categories.TotalItemCount</p>

    @Html.PagedListPager(Model.Categories, Page => Url.Action("Index", "Category", new
    {
        Rows = Model.Filters.Rows,
        Page = Page
    }),
    new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 3
    })
}

@* Modal para criar categoria *@
<div class="modal fade" id="create-category-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("CreateCategory", "Category", FormMethod.Post, new { @onsubmit = "submitForm(this, 1)", @id = $"create-user-form", role = "form" }))
            {
                <div class="modal-header">
                    <h3 class="modal-title">Criar novo modelo de produto</h3>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    @Html.AntiForgeryToken()

                    @Html.Hidden("newCategory.CreatedAt", DateTime.Now)

                    <div class="form-group">
                        @Html.LabelFor(m => m.NewCategory.Name, new { @class = "form-label", @for = "new-user-name" })
                        @Html.TextBoxFor(m => m.NewCategory.Name, new { @class = "form-control", @id = "new-user-name" })
                        @Html.ValidationMessageFor(m => m.NewCategory.Name)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewCategory.Color, new { @class = "form-label", @for = "new-user-cpf" })
                        @Html.TextBoxFor(m => m.NewCategory.Color, new { @class = "form-control", @id = "new-user-cpf" })
                        @Html.ValidationMessageFor(m => m.NewCategory.Color)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewCategory.Sole, new { @class = "form-label", @for = "new-user-email" })
                        @Html.TextBoxFor(m => m.NewCategory.Sole, new { @class = "form-control", @id = "new-user-email" })
                        @Html.ValidationMessageFor(m => m.NewCategory.Sole)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewCategory.Description, new { @class = "form-label", @for = "new-user-password" })
                        @Html.TextAreaFor(m => m.NewCategory.Description, new { @class = "form-control", @id = "new-user-password" })
                        @Html.ValidationMessageFor(m => m.NewCategory.Description)
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {

    @if (ViewBag.SuccessMessage != null)
    {
        <script>
            Swal.fire("Operação concluída", `@Html.Raw($"{ViewBag.SuccessMessage}")`, "success");
        </script>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            Swal.fire("Ocorreu um erro", `@Html.Raw($"{ViewBag.ErrorMessage}")`, "error");
        </script>
    }

    <script>
        async function submitSelling(barcode) {
            const { value: text, dismiss: isCanceled } = await Swal.fire({
                title: 'Retirada de item do estoque',
                input: 'textarea',
                inputLabel: 'Deseja salvar uma observação junto?',
                inputPlaceholder: 'Digite algo ...',
                inputAttributes: {
                    'aria-label': 'Type your message here'
                },
                showCancelButton: true,
                confirmButtonText: 'Confirmar',
                cancelButtonText: 'Cancelar',
            });

            if (isCanceled)
                return;

            $.ajax({
                type: "POST",
                url: "@Url.Action("SellShoe", "Category")",
                data: {
                    hashCode: barcode,
                    note: text
                },
                success: async function (data) {
                    if (!data.success) {
                        Swal.fire('Ops', `Não foi possível remove o item do estoque, detalhes: ${ data.message }`,'error');
                        return;
                    }

                    await Swal.fire('Sucesso', 'O produto foi removido do estoque. \n\nParabéns pela venda!', 'success');

                    location.reload();
                },
                error: function () {
                    Swal.fire('Ops', 'problemas ao conectar com o servidor! \n\nTente novamente mais tarde.', 'error');
                }
            });
        }

        function downloadExcelFile() {
            Swal.fire({
                title: "Atenção!",
                text: "O formulário será gerado dos valores em tela",
                icon: "info",
            }).then(() => {
                $.ajax({
                    url: '@Url.Action("GenerateReportOfCategories", "Category")',
                    method: 'POST',
                    data: {
                        SearchItem: '@(Model.Filters.SearchItem)',
                        Rows: '@(Model.Filters.Rows)',
                        Page: '@(Model.Filters.Page)',
                    },
                    xhrFields: {
                        responseType: 'arraybuffer'
                    },
                    success: function (data) {
                        var blob = new Blob([data], { type: 'application/octet-stream' });
                        var url = window.URL.createObjectURL(blob);
                        var linkElement = document.createElement('a');
                        linkElement.href = url;
                        linkElement.download = 'Relatório de produtos.xlsx';
                        linkElement.click();
                        window.URL.revokeObjectURL(url);

                        Swal.fire("Download concluído!", "relatório baixado com sucesso", "success");
                    },
                    error: () => Swal.fire("Ops ...", "Erro ao processar o download", "error"),
                });
            });
        };
    </script>
}