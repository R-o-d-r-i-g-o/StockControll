@model StockControll.ViewModel.UsersViewModel
@using StockControll.Commons
@using PagedList.Mvc

@{
    ViewBag.Title = "Usuários da aplicação";
}

<style>
    div.green {
        background: green;
    }

    .page-title {
        text-align: center;
        margin: 30px 0;
    }

    .button-set {
        display: flex;
        gap: 10px;
    }

        .button-set button:nth-of-type(3) {
            margin-left: auto;
        }

    .weight-600 {
        font-weight: 600;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        width: 100%;
    }

    .filters {
        margin-bottom: 20px;
    }

    .filters-container {
        display: none;
        width: 100%;
        padding: 20px;
        height: fit-content;
        margin-bottom: 10px;
        border: 1px solid black;
    }

        .filters-container > row {
            max-width: 100%;
        }

    .button-delete {
        background: red !important;
        border-color: red !important;
    }

    .fa-solid {
        margin-right: 8px;
    }

    .modal-title {
        display: contents;
    }

    .pagination-container {
        display: flex;
    }

        .pagination-container > ul {
            margin-inline: auto;
        }
</style>

@Styles.Render("~/Content/bootstrap.min.css", "~/Content/bootstrap.theme.min.css", "~/Content/bootstrap.theme.min.css.map", "~/Content/bootstrap.css", "~/Content/site.css", "~/Content/sweetalert2.min.css")

<h3 class="page-title weight-600">@ViewBag.Title</h3>
<hr class="weight-600" />

<div id="filters" class="filters">
    <div class="filters-container">
        @using (Html.BeginForm("Contact", "Home", FormMethod.Get, new { @class = "row g-3", role = "form" }))
        {
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.SearchUser, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchUser, new { @class = "form-control", @id = "user-name-search" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.Rows, new { @class = "form-label", @for = "user-name-search" })
                @Html.DropDownListFor(m => m.Filters.Rows, Model.Filters.GetPaginationOptions(), "Choose an option", new { @class = "form-control" })
            </div>

            <div class="col-lg-12" style="text-align: right; margin-top: 10px;">
                <button type="submit" class="btn btn-primary">Filtrar</button>
            </div>
        }
    </div>
    <div class="row button-set">
        <button id="btnShowFilters"
                class="btn btn-primary">
            Filtros
        </button>
        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                onclick="downloadExcelFile()"
                class="btn btn-primary">
            Gerar relatório
        </button>

        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                onclick="downloadExcelFile()"
                class="btn btn-primary">
            <i class="fa-solid fa-check"></i>
            Novo usuário
        </button>

    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nome</th>
                <th scope="col">E-mail</th>
                <th scope="col">Cargo</th>
                <th scope="col">Status</th>
                <th scope="col">Criado em</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var user in Model.Users)
            {
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.UserType.GetDescription()</td>
                    <td>
                        @if (user.DeletedAt.HasValue)
                        {
                            <div class="badge bg-primary text-wrap" style="width: 6rem;">
                                inativo
                            </div>
                        }
                        else
                        {
                            <div class="badge bg-primary text-wrap green" style="width: 6rem;">
                                Ativo
                            </div>
                        }
                    </td>
                    <td>@user.CreatedAt</td>
                    <td>
                        <div class="action-buttons">
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
                                <i class="fa-solid fa-pen-to-square"></i>
                                Editar
                            </button>

                            <button type="button" class="btn btn-primary button-delete" onclick="deleteRegister('@user.Id', '@user.Name')">
                                <i class="fa-solid fa-xmark"></i>
                                Deletar
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="myForm">

                <div class="modal-header">
                    <h3 class="modal-title">Modal Header</h3>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label for="name">Name:</label>
                        <input type="text" class="form-control" id="name" name="name">
                    </div>
                    <div class="form-group">
                        <label for="email">Email:</label>
                        <input type="email" class="form-control" id="email" name="email">
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" onclick="submitForm()">Submit</button>
                </div>
            </form>

        </div>
    </div>
</div>

@if (@Model.Users.TotalItemCount > 0)
{
    <p>Exibindo de @Model.Filters.Page até @Model.Users.PageCount de @Model.Users.TotalItemCount</p>

    @Html.PagedListPager(Model.Users, Page => Url.Action("Contact", new
    {
        Rows = Model.Filters.Rows,
        Page = Page
    }),
    new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 3
    })
}

@Scripts.Render("~/Content/code.jquery.com_jquery-3.7.1.min.js", "~/Content/sweetalert2.min.js")

<script>
    function submitForm() {
        event.preventDefault();

        console.log('veio aqui', event);

        $("#myForm").submit();
    }

    function deleteRegister(userID, userName) {
        Swal.fire({
            title: 'Uma pergunta ...',
            text: `Deseja deletar o usuário "${userName}"?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Não',
            confirmButtonText: 'Sim, deletar'
        }).then(result => {


            console.log(result)

            if (!result.isConfirmed)
                return;

            console.log(result.isDenied)

            $.ajax({
                url: "@Url.Action("DeleteUser", "Home")",
                type: "POST",
                data: { userID },
                success: function (data) {
                    if (!data.success) {
                        Swal.fire('Ops ...', data.message, 'error')
                        return;
                    }

                    Swal.fire({
                        title: 'Sucesso!',
                        text: 'Usuário deletado com sucesso.',
                        icon: 'success',
                    })
                },
                error: (err) => Swal.fire('Ops ...', err.message, 'error',
                )
            });
        })
    }

     function downloadExcelFile() {
            Swal.fire({
                title: "Confirmação",
                text: "Deseja gerar o relatório dos valores da tela?",
                icon: "info",
                closeOnClickOutside: false,
                closeOnEsc: false,
                buttons: {
                    confirm: { text: "Sim", value: true, closeModal: false },
                    cancel: "Não"
                }
            }).then((res) => {
                if (!res) return;

                console.log('o que veio ', res)

                $.ajax({
                    url: '@Url.Action("GenerateReportFromTransactions", "Home")',
                    method: 'POST',
                    data: {
                        SearchItem: '@(Model.Filters.SearchItem)',
                        Rows: '@(Model.Filters.Rows)',
                        Page: '@(Model.Filters.Page)',
                    },
                    xhrFields: {
                        responseType: 'arraybuffer'
                    },
                    success: function (data) {
                        var blob = new Blob([data], { type: 'application/octet-stream' });
                        var url = window.URL.createObjectURL(blob);
                        var linkElement = document.createElement('a');
                        linkElement.href = url;
                        linkElement.download = 'Relatório de usuários.xlsx';
                        linkElement.click();
                        window.URL.revokeObjectURL(url);

                        Swal.fire("Download concluído!", "relatório baixado com sucesso", "success");
                    },
                    error: function () {
                        Swal.fire("Ops ...", "Erro ao processar o download", "error");
                    }
                });
            });
        };

    $(document).ready(function () {

        $("#btnShowFilters").click(function () {
            $(".filters-container").slideToggle();
        });

        $("#myForm").submit(function (event) {
            event.preventDefault();
            // Perform form submission logic here

            $("#myModal").modal("hide");
        });
    });
</script>
