@model StockControll.ViewModel.UsersViewModel
@using StockControll.Commons
@using PagedList.Mvc

@{ ViewBag.Title = "Usuários da aplicação"; }

<h3 class="page-title weight-600">@ViewBag.Title</h3>
<hr class="weight-600" />

<div id="filters" class="filters">
    <div class="filters-container">
        @using (Html.BeginForm("Index", "User", FormMethod.Get, new { @class = "row g-3", role = "form" }))
        {
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.SearchUser, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchUser, new { @class = "form-control", @id = "user-name-search" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.Rows, new { @class = "form-label", @for = "user-name-search" })
                @Html.DropDownListFor(m => m.Filters.Rows, Model.Filters.GetPaginationOptions(), "Escolha uma opção de paginação", new { @class = "form-control" })
            </div>

            <div class="col-lg-12" style="text-align: right; margin-top: 10px;">
                <button type="submit" class="btn btn-primary">
                    <i class="fa-solid fa-check"></i>
                    Filtrar
                </button>
            </div>
        }
    </div>
    <div class="row button-set">
        <button id="btnShowFilters"
                onclick="$('.filters-container').slideToggle();"
                class="btn btn-primary">
            Filtros
        </button>
        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                onclick="
                    downloadExcelFile(
                        '@Url.Action("GenerateReportFromTransactions", "User")',
                        {
                            SearchItem: '@(Model.Filters.SearchItem)',
                            Rows: '@(Model.Filters.Rows)',
                            Page: '@(Model.Filters.Page)',
                        },
                        'Relatório de usuários'
                    )
                "
                class="btn btn-primary">
            Gerar relatório
        </button>

        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                data-toggle="modal"
                data-target="#create-user-modal"
                class="btn btn-primary">
            <i class="fa-solid fa-plus"></i>
            Novo usuário
        </button>

    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nome</th>
                <th scope="col">CPF</th>
                <th scope="col">E-mail</th>
                <th scope="col">Cargo</th>
                <th scope="col">Status</th>
                <th scope="col">Data de criação</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @if (Model.Users.TotalItemCount > 0)
            {
                foreach (var user in Model.Users)
                {
                    {
                        // Obs.: Não mostar a senha do usuário
                        user.Password = user.Password.HidePassword();
                    }
                    <tr>
                        <th scope="row">@user.Id</th>
                        <td>@user.Name</td>
                        <td>@user.CPF.AddMaskToCpf()</td>
                        <td>@user.Email</td>
                        <td>&bull; @user.UserType.GetDescription()</td>
                        <td>
                            @if (user.DeletedAt.HasValue)
                            {
                                <div class="badge bg-primary text-wrap" style="width: 6rem;">
                                    Inativo
                                </div>
                            }
                            else
                            {
                                <div class="badge bg-primary text-wrap green" style="width: 6rem;">
                                    Ativo
                                </div>
                            }
                        </td>
                        <td>@user.CreatedAt</td>
                        <td>
                            <div class="action-buttons">
                                <button type="button"
                                        @(user.DeletedAt.HasValue ? "disabled" : "")
                                        class="btn btn-primary"
                                        data-toggle="modal"
                                        data-target="@($"#edit-user-modal-{user.Id}")">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                    Editar
                                </button>

                                <button type="button"
                                        @(user.DeletedAt.HasValue ? "disabled" : "")
                                        class="btn btn-danger"
                                        onclick="deleteRegister('@user.Id', '@user.Name')">
                                    <i class="fa-solid fa-xmark"></i>
                                    Deletar
                                </button>

                                @Html.Partial("~/Views/User/_modal_edit.cshtml", user)
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr class="text-center danger">
                    <td colspan="8">Ainda não existem usuários cadastrados</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (@Model.Users.TotalItemCount > 0)
{
    <p>Exibindo de @Model.Filters.Page até @Model.Users.PageCount de @Model.Users.TotalItemCount</p>

    @Html.PagedListPager(Model.Users, Page => Url.Action("Index", "User", new
    {
        Rows = Model.Filters.Rows,
        Page = Page
    }),
    new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 3
    })
}

@Html.Partial("~/Views/User/_modal_create.cshtml", new StockControll.Models.User())

@section Scripts {

    @if (ViewBag.SuccessMessage != null)
    {
        <script>
            Swal.fire("Operação concluída", `@Html.Raw($"{ViewBag.SuccessMessage}")`, "success");
        </script>
    }

    @if (ViewBag.ErrorMessage != null)
    {
        <script>
            Swal.fire("Ocorreu um erro", `@Html.Raw($"{ViewBag.ErrorMessage}")`, "error");
        </script>
    }

    <script>

        function deleteRegister(userID, userName) {
            Swal.fire({
                title: 'Uma pergunta ...',
                text: `Deseja deletar o usuário "${userName}"?`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                cancelButtonText: 'Não',
                confirmButtonText: 'Sim, deletar'
            }).then(result => {

                if (!result.isConfirmed)
                    return;

                console.log(result.isDenied)

                $.ajax({
                    url: "@Url.Action("DeleteUser", "User")",
                    type: "POST",
                    data: { userID },
                    success: async function (data) {
                        if (!data.success) {
                            Swal.fire('Ops ...', data.message, 'error')
                            return;
                        }

                        await Swal.fire({
                            title: 'Sucesso!',
                            text: 'Usuário deletado com sucesso.',
                            icon: 'success',
                        })

                        location.reload();
                    },
                    error: (err) => Swal.fire('Ops ...', err.message, 'error')
                });
            })
        }
    </script>
}
