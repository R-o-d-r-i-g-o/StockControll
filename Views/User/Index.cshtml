@model StockControll.ViewModel.UsersViewModel
@using StockControll.Commons
@using PagedList.Mvc

@{ ViewBag.Title = "Usuários da aplicação"; }

<h3 class="page-title weight-600">@ViewBag.Title</h3>
<hr class="weight-600" />

<div id="filters" class="filters">
    <div class="filters-container">
        @using (Html.BeginForm("Index", "User", FormMethod.Get, new { @class = "row g-3", role = "form" }))
        {
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.SearchUser, new { @class = "form-label", @for = "user-name-search" })
                @Html.TextBoxFor(m => m.Filters.SearchUser, new { @class = "form-control", @id = "user-name-search" })
            </div>
            <div class="col-md-6">
                @Html.LabelFor(m => m.Filters.Rows, new { @class = "form-label", @for = "user-name-search" })
                @Html.DropDownListFor(m => m.Filters.Rows, Model.Filters.GetPaginationOptions(), "Escolha uma opção de paginação", new { @class = "form-control" })
            </div>

            <div class="col-lg-12" style="text-align: right; margin-top: 10px;">
                <button type="submit" class="btn btn-primary">
                    <i class="fa-solid fa-check"></i>
                    Filtrar
                </button>
            </div>
        }
    </div>
    <div class="row button-set">
        <button id="btnShowFilters"
                onclick="$('.filters-container').slideToggle();"
                class="btn btn-primary">
            Filtros
        </button>
        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                onclick="downloadExcelFile()"
                class="btn btn-primary">
            Gerar relatório
        </button>

        <button type="button"
                title="O filtro será gerado de acordo com os dados do filtro"
                data-toggle="modal"
                data-target="#create-user-modal"
                class="btn btn-primary">
            <i class="fa-solid fa-plus"></i>
            Novo usuário
        </button>

    </div>
</div>

<div class="table-responsive">
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nome</th>
                <th scope="col">CPF</th>
                <th scope="col">E-mail</th>
                <th scope="col">Cargo</th>
                <th scope="col">Status</th>
                <th scope="col">Data de criação</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var user in Model.Users)
            {
                {
                    // Obs.: Não mostar a senha do usuário
                    user.Password = user.Password.HidePassword();
                }
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Name</td>
                    <td>@user.CPF.AddMaskToCpf()</td>
                    <td>@user.Email</td>
                    <td>&bull; @user.UserType.GetDescription()</td>
                    <td>
                        @if (user.DeletedAt.HasValue)
                        {
                            <div class="badge bg-primary text-wrap" style="width: 6rem;">
                                inativo
                            </div>
                        }
                        else
                        {
                            <div onclick="console.log('oq vieo', '@user.UserType')" class="badge bg-primary text-wrap green" style="width: 6rem;">
                                Ativo
                            </div>
                        }
                    </td>
                    <td>@user.CreatedAt</td>
                    <td>
                        <div class="action-buttons">
                            <button type="button" class="btn btn-primary" data-toggle="modal" data-target="@($"#edit-user-modal-{user.Id}")">
                                <i class="fa-solid fa-pen-to-square"></i>
                                Editar
                            </button>

                            <button type="button" class="btn btn-primary button-delete" onclick="deleteRegister('@user.Id', '@user.Name')">
                                <i class="fa-solid fa-xmark"></i>
                                Deletar
                            </button>

                            @* Modal para editar usuário *@
                            <div class="modal fade" id="@($"edit-user-modal-{user.Id}")">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        @using (Html.BeginForm("EditUser", "User", FormMethod.Post, new { @id = $"edit-user-form-{user.Id}", role = "form" }))
                                        {
                                            <div class="modal-header">
                                                <h3 class="modal-title">Edição de usuário</h3>
                                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                            </div>

                                            <div class="modal-body">
                                                @Html.AntiForgeryToken()

                                                @Html.Hidden("user.Id", user.Id)
                                                @Html.Hidden("user.CreatedAt", user.CreatedAt)
                                                @Html.Hidden("user.DeletedAt", user.DeletedAt)

                                                <div class="form-group">
                                                    @Html.LabelFor(_ => user.Name, new { @class = "form-label", @for = "user-name-search" })
                                                    @Html.TextBoxFor(_ => user.Name, new { @class = "form-control", @id = "user-name-search" })
                                                    @Html.ValidationMessageFor(_ => user.Name)
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(_ => user.CPF, new { @class = "form-label", @for = "user-name-search" })
                                                    @Html.TextBoxFor(_ => user.CPF, new { @class = "form-control", @id = "user-name-search", maxlength = "11", @oninput = "RemoveSpecialCharacters(this)" })
                                                    @Html.ValidationMessageFor(_ => user.CPF)
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(_ => user.Email, new { @class = "form-label", @for = "user-name-search" })
                                                    @Html.TextBoxFor(_ => user.Email, new { @class = "form-control", @id = "user-name-search" })
                                                    @Html.ValidationMessageFor(_ => user.Email)
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(_ => user.Password, new { @class = "form-label", @for = "user-name-search" })
                                                    @Html.TextBoxFor(_ => user.Password, new { @class = "form-control", @id = "user-name-search" })
                                                    @Html.ValidationMessageFor(_ => user.Password)
                                                </div>
                                                <div class="form-group">
                                                    @Html.LabelFor(_ => user.UserType, new { @class = "form-label", @for = "user-name-search" })
                                                    @Html.DropDownListFor(_ => user.UserType, Enums.GetUsertypeOptions(user.UserType), "Choose an option", new { @class = "form-control" })
                                                    @Html.ValidationMessageFor(_ => user.UserType)
                                                </div>
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                                                <button type="button" class="btn btn-primary" onclick="submitForm(this, 0)">Salvar</button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (@Model.Users.TotalItemCount > 0)
{
    <p>Exibindo de @Model.Filters.Page até @Model.Users.PageCount de @Model.Users.TotalItemCount</p>

    @Html.PagedListPager(Model.Users, Page => Url.Action("Index", "User", new
    {
        Rows = Model.Filters.Rows,
        Page = Page
    }),
    new PagedListRenderOptions
    {
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 3
    })
}

@* Modal para criar usuário *@
<div class="modal fade" id="create-user-modal">
    <div class="modal-dialog">
        <div class="modal-content">
            @using (Html.BeginForm("CreateUser", "User", FormMethod.Post, new { @id = $"create-user-form", role = "form" }))
            {
                <div class="modal-header">
                    <h3 class="modal-title">Edição de usuário</h3>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>

                <div class="modal-body">
                    @Html.AntiForgeryToken()

                    @Html.Hidden("newUser.CreatedAt", DateTime.Now)
                    @Html.Hidden("newUser.DeletedAt", null)

                    <div class="form-group">
                        @Html.LabelFor(m => m.NewUser.Name, new { @class = "form-label", @for = "user-name-search" })
                        @Html.TextBoxFor(m => m.NewUser.Name, new { @class = "form-control", @id = "user-name-search" })
                        @Html.ValidationMessageFor(m => m.NewUser.Name)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewUser.CPF, new { @class = "form-label", @for = "user-name-search" })
                        @Html.TextBoxFor(m => m.NewUser.CPF, new { @class = "form-control", @id = "user-name-search", maxlength = "11", @oninput = "RemoveSpecialCharacters(this)" })
                        @Html.ValidationMessageFor(m => m.NewUser.CPF)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewUser.Email, new { @class = "form-label", @for = "user-name-search" })
                        @Html.TextBoxFor(m => m.NewUser.Email, new { @class = "form-control", @id = "user-name-search" })
                        @Html.ValidationMessageFor(m => m.NewUser.Email)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewUser.Password, new { @class = "form-label", @for = "user-name-search" })
                        @Html.TextBoxFor(m => m.NewUser.Password, new { @class = "form-control", @id = "user-name-search" })
                        @Html.ValidationMessageFor(m => m.NewUser.Password)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.NewUser.UserType, new { @class = "form-label", @for = "user-name-search" })
                        @Html.DropDownListFor(m => m.NewUser.UserType, Enums.GetUsertypeOptions(), "Escolha o cargo do usuário", new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.NewUser.UserType)
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" onclick="submitForm(this, 1)">Salvar</button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    const actionType = Object.freeze({
        Edit: 0,
        Update: 1
    });

    function submitForm(submit, action) {
        event.preventDefault();

        var isEditAction = action === actionType.Edit;

        Swal.fire({
            title: 'Uma pergunta ...',
            text: `Deseja enviar o formulário de ${isEditAction ? 'edição' : 'criação'}?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Não',
            confirmButtonText: 'Sim'
        }).then(result => {
            var modal = submit.closest('.modal');
            var form = submit.closest('form');

            if (!result.isConfirmed) {
                $(`#${modal.id}`).modal("hide");
                return;
            }

            $(`#${modal.id}`).modal("hide");
            form.submit()
        })
    }

    function deleteRegister(userID, userName) {
        Swal.fire({
            title: 'Uma pergunta ...',
            text: `Deseja deletar o usuário "${userName}"?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            cancelButtonText: 'Não',
            confirmButtonText: 'Sim, deletar'
        }).then(result => {

            if (!result.isConfirmed)
                return;

            console.log(result.isDenied)

            $.ajax({
                url: "@Url.Action("DeleteUser", "User")",
                type: "POST",
                data: { userID },
                success: async function (data) {
                    if (!data.success) {
                        Swal.fire('Ops ...', data.message, 'error')
                        return;
                    }

                    await Swal.fire({
                        title: 'Sucesso!',
                        text: 'Usuário deletado com sucesso.',
                        icon: 'success',
                    })

                    location.reload();
                },
                error: (err) => Swal.fire('Ops ...', err.message, 'error')
            });
        })
    }

    function downloadExcelFile() {
        Swal.fire({
            title: "Atenção!",
            text: "O formulário será gerado dos valores em tela",
            icon: "info",
        }).then(() => {
            $.ajax({
                url: '@Url.Action("GenerateReportFromTransactions", "User")',
                method: 'POST',
                data: {
                    SearchItem: '@(Model.Filters.SearchItem)',
                    Rows: '@(Model.Filters.Rows)',
                    Page: '@(Model.Filters.Page)',
                },
                xhrFields: {
                    responseType: 'arraybuffer'
                },
                success: function (data) {
                    var blob = new Blob([data], { type: 'application/octet-stream' });
                    var url = window.URL.createObjectURL(blob);
                    var linkElement = document.createElement('a');
                    linkElement.href = url;
                    linkElement.download = 'Relatório de usuários.xlsx';
                    linkElement.click();
                    window.URL.revokeObjectURL(url);

                    Swal.fire("Download concluído!", "relatório baixado com sucesso", "success");
                },
                error: () => Swal.fire("Ops ...", "Erro ao processar o download", "error"),
            });
        });
    };

    function RemoveSpecialCharacters(input) {
        var cleanedValue = input.value.replace(/[^\d]/g, '');
        input.value = cleanedValue;
    }

    $(document).ready(function () {
        @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
        {
            <text>
              (async function () {
                  await Swal.fire('Ops...', '@ViewBag.ErrorMessage', 'error');

                  location.href = '@Url.Action("Contact", "Home")';
              })()
            </text>
        }

        @if (!string.IsNullOrEmpty(ViewBag.SuccessMessage))
        {
            <text>
              (async function () {
                await Swal.fire('Operação concluída', '@ViewBag.SuccessMessage', 'success');

                location.href = '@Url.Action("Contact", "Home")';
              })()
            </text>
        }
    });
</script>
